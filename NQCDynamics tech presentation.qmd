---
title: "How does NQCDynamics.jl work?"
author: "Alex Spears"
date-format: "DD.MM.YYYY"
date: "11.04.2024"

toc: true
toc-depth: 2

execute: 
  freeze: auto



format: 
  revealjs: 
    slideNumber: true
    transition: slide
    controls: true
    progress: true
    aspectRatio: 16:9
    output-file: output/slides.html
---

## The NQCD "ecosystem"
```{mermaid}
%%| label: fig-nqcd-graph
%%| fig-cap: "Packages in the NQCD ecosystem"
%%| fig-responsive: true
%%| r-stretch: true
%%| mermaid-format: svg
%%| file: nqcd_packages.mmd
```

## NQCBase.jl{ncols=2}
- `Atoms`
- `PeriodicCell`
- IO functions:
    - `convert_from_ase_atoms`
    - `convert_to_ase_atoms`

## NQCModels.jl
- `Model`
    - Defines a potential energy surface
    - Dimensionality: arbitrary (in principle)
    - Methods: `potential(model, R), derivative(model, R)` (and allocating versions)
```{.julia}
using NQCModels
model=AdiabaticASEModel(ase_structure)
NQCModels.potential(model, R)
NQCModels.derivative!(model, D, R)
```

## NQCDistributions.jl
- `DynamicalDistribution`
    - Container for initial conditions (positions, velocities)
- Various distribution functions (e.g `VelocityBoltzmann`)
```{mermaid}
%%| fig-responsive: true
%%| r-stretch: true
%%| mermaid-format: svg
%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '25px'}}}%%

graph LR
    R[Random sampling\n from distribution] --> S1(SampleableComponent:\n positions)
    F[Analytical distribution\n functions] --> S1
    Rfix[Fixed configuration] --> S1
    R[Random sampling\n from distribution] --> S2(SampleableComponent:\n velocities)
    F[Analytical distribution\n functions] --> S2
    Rfix[Fixed configuration] --> S2
    S1 --> DD(DynamicalDistribution)
    S2 --> DD
    S3(electronic state) --> DD
```

## NQCDynamics.jl
```{mermaid}
%%| fig-responsive: true
%%| r-stretch: true
%%| mermaid-format: svg

%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '16px'}}}%%

graph LR
    subgraph DifferentialEquations.jl
        U[ODE representation for\n DifferentialEquations.jl]
        U --> S[Solution\n object]
    end
    subgraph sg1 ["NQCDynamics.jl"]
        direction LR
        A[Atomic structure] --> U
        P[PES] --> U
        I[Initial conditions] --> U
        D[Method-specific\n ODE solver] --> U
    end
    subgraph sg2 ["NQCDynamics.jl"]
        direction LR
        S --> O[Final trajectory]
        S --> ER[Ensemble\n statistics]
        S --> CQ[Calculated\n quantities]
    end
    style sg1 fill:lightblue, stroke:black;
    style sg2 fill:lightblue, stroke:black;
```

---

- wraps around DifferentialEquations.jl to propagate dynamics
    - unit conversions
    - equations of motion
    - consistent inputs/outputs
- turns propagated trajectories back into more "readable" form

---

### Types in NQCDynamics.jl and what they do


### `Calculator`

### `Simulation`

### `DynamicsMethods`

### `DynamicsOutputs`

### What happens when we run dynamics?
